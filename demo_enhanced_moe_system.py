#!/usr/bin/env python3
"""
Enhanced ARC EFE MoE System Demonstration

This comprehensive demo showcases the complete enhanced ARC system with Mixture of Experts,
demonstrating the hierarchical architecture and all integrated components:

üèóÔ∏è Architecture:
Level 1: Enhanced Solvers (Strategy & Decision-making)
Level 2: MoE Router (Expert Selection & Coordination)  
Level 3: Movement Experts (Atomic Transformations)

üéØ Features Demonstrated:
- Hierarchical solver architecture with MoE integration
- Declarative movement language and compilation
- Multi-level consensus (solver + movement level)
- Enhanced EFE calculation with movement optimization
- RevThink verification with movement reasoning traces
- Comprehensive learning and adaptation
"""

import numpy as np
import matplotlib.pyplot as plt
import time
import warnings
from typing import Dict, List, Any
from collections import defaultdict

# Import all components
from enhanced_arc_ensemble_moe import create_enhanced_arc_system
from movement_language import MovementScriptBuilder, create_flip_script, create_rotation_script
from movement_experts import MovementType
from test_moe_system import run_comprehensive_test_suite

def create_diverse_arc_problems() -> List[Dict[str, Any]]:
    """Create diverse ARC problems to showcase different MoE capabilities"""
    
    problems = []
    
    # Problem 1: Symmetry Challenge
    problems.append({
        'name': 'Symmetry Challenge',
        'description': 'Grid with horizontal symmetry requiring flip transformation',
        'input': np.array([
            [1, 2, 3, 2, 1],
            [2, 3, 4, 3, 2], 
            [3, 4, 5, 4, 3],
            [2, 3, 4, 3, 2],
            [1, 2, 3, 2, 1]
        ]),
        'expected_output': np.array([
            [1, 2, 3, 2, 1],
            [2, 3, 4, 3, 2],
            [3, 4, 5, 4, 3], 
            [2, 3, 4, 3, 2],
            [1, 2, 3, 2, 1]
        ]),
        'constraints': {
            'color_constraints': [1, 2, 3, 4, 5],
            'symmetry': 'horizontal',
            'preserve_pattern': True
        },
        'expected_experts': ['FlipExpert', 'RotationExpert'],
        'difficulty': 'Easy'
    })
    
    # Problem 2: Color Pattern Transformation
    problems.append({
        'name': 'Color Pattern Swap',
        'description': 'Binary pattern requiring color swap transformation',
        'input': np.array([
            [0, 1, 0, 1],
            [1, 0, 1, 0],
            [0, 1, 0, 1],
            [1, 0, 1, 0]
        ]),
        'expected_output': np.array([
            [1, 0, 1, 0],
            [0, 1, 0, 1],
            [1, 0, 1, 0],
            [0, 1, 0, 1]
        ]),
        'constraints': {
            'color_constraints': [0, 1],
            'pattern_type': 'checkerboard',
            'maintain_structure': True
        },
        'expected_experts': ['ColorTransformExpert'],
        'difficulty': 'Easy'
    })
    
    # Problem 3: Geometric Transformation
    problems.append({
        'name': 'Rotation Challenge',
        'description': 'Square pattern requiring rotation transformation',
        'input': np.array([
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]
        ]),
        'expected_output': np.array([
            [7, 4, 1],
            [8, 5, 2],
            [9, 6, 3]
        ]),
        'constraints': {
            'color_constraints': [1, 2, 3, 4, 5, 6, 7, 8, 9],
            'transformation_type': 'rotation',
            'preserve_structure': True
        },
        'expected_experts': ['RotationExpert'],
        'difficulty': 'Medium'
    })
    
    # Problem 4: Complex Multi-Step
    problems.append({
        'name': 'Multi-Step Transformation',
        'description': 'Complex pattern requiring multiple transformation steps',
        'input': np.array([
            [1, 0, 1, 0],
            [0, 2, 0, 2],
            [1, 0, 1, 0],
            [0, 2, 0, 2]
        ]),
        'expected_output': np.array([
            [2, 0, 2, 0],
            [0, 1, 0, 1],
            [2, 0, 2, 0],
            [0, 1, 0, 1]
        ]),
        'constraints': {
            'color_constraints': [0, 1, 2],
            'multi_step': True,
            'pattern_preservation': False
        },
        'expected_experts': ['ColorTransformExpert', 'TranslationExpert'],
        'difficulty': 'Hard'
    })
    
    # Problem 5: Translation Challenge
    problems.append({
        'name': 'Translation Pattern',
        'description': 'Pattern requiring spatial translation',
        'input': np.array([
            [1, 1, 0, 0],
            [1, 1, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]),
        'expected_output': np.array([
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 1, 1],
            [0, 0, 1, 1]
        ]),
        'constraints': {
            'color_constraints': [0, 1],
            'transformation_type': 'translation',
            'preserve_shape': True
        },
        'expected_experts': ['TranslationExpert'],
        'difficulty': 'Medium'
    })
    
    return problems

def demonstrate_movement_experts():
    """Demonstrate individual movement expert capabilities"""
    print("\\nüîß MOVEMENT EXPERT DEMONSTRATIONS")
    print("=" * 60)
    
    from movement_experts import FlipExpert, RotationExpert, TranslationExpert, ColorTransformExpert
    
    # Test grid
    test_grid = np.array([[1, 2], [3, 4]])
    
    experts = {
        'Flip Expert': FlipExpert(),
        'Rotation Expert': RotationExpert(), 
        'Translation Expert': TranslationExpert(),
        'Color Transform Expert': ColorTransformExpert()
    }
    
    for expert_name, expert in experts.items():
        print(f"\\nüéØ {expert_name}")
        print("-" * 30)
        
        # Get parameter space
        param_space = expert.get_parameter_space()
        print(f"Parameters: {list(param_space.keys())}")
        
        # Test with default parameters
        default_params = {}
        for param_name, config in param_space.items():
            default_params[param_name] = config.get('default')
        
        # Execute expert
        try:
            result = expert.execute(test_grid, default_params)
            print(f"Success: {result.success}")
            print(f"Confidence: {result.confidence:.3f}")
            print(f"Operation: {result.operation_type}")
            if result.success:
                print(f"Input:  {test_grid.flatten()}")
                print(f"Output: {result.output_grid.flatten()}")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    print("\\n‚úÖ Movement expert demonstrations completed!")

def demonstrate_moe_router():
    """Demonstrate MoE router capabilities"""
    print("\\nüéØ MOE ROUTER DEMONSTRATIONS")
    print("=" * 60)
    
    from moe_router import create_default_moe_router, RoutingStrategy
    
    router = create_default_moe_router()
    
    # Test different grid types
    test_grids = {
        'Symmetric': np.array([[1, 2, 1], [2, 3, 2], [1, 2, 1]]),
        'Binary': np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]]),
        'Complex': np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    }
    
    routing_strategies = [
        RoutingStrategy.CONFIDENCE_BASED,
        RoutingStrategy.MULTI_EXPERT
    ]
    
    for grid_name, grid in test_grids.items():
        print(f"\\nüìä Grid Type: {grid_name}")
        print(f"Grid:\\n{grid}")
        
        for strategy in routing_strategies:
            print(f"\\n  Strategy: {strategy.value}")
            try:
                routing_result = router.route(grid, strategy=strategy)
                print(f"  Selected experts: {len(routing_result.selected_experts)}")
                print(f"  Routing confidence: {routing_result.routing_confidence:.3f}")
                print(f"  Expert names: {[call.expert_name for call in routing_result.selected_experts]}")
                
                # Show grid analysis
                analysis = routing_result.grid_analysis
                print(f"  Grid complexity: {analysis.get('complexity', 'N/A')}")
                print(f"  Symmetries: {list(analysis.get('has_symmetry', {}).keys())}")
                
            except Exception as e:
                print(f"  ‚ùå Routing failed: {e}")
    
    # Show router statistics
    print(f"\\nüìà Router Statistics:")
    stats = router.get_routing_statistics()
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    print("\\n‚úÖ MoE router demonstrations completed!")

def demonstrate_movement_language():
    """Demonstrate movement language capabilities"""
    print("\\nüìù MOVEMENT LANGUAGE DEMONSTRATIONS")
    print("=" * 60)
    
    from movement_language import MovementScript, MovementOperator, MovementCondition
    from moe_router import create_default_moe_router
    from movement_language import MovementCompiler
    
    router = create_default_moe_router()
    compiler = MovementCompiler(router)
    
    # Demonstrate script creation
    print("\\nüî® Creating Movement Scripts:")
    
    # Simple script
    simple_script = MovementScript(name="simple_transformation")
    simple_script.add_flip(axis='horizontal')
    simple_script.add_rotation(angle=90)
    print(f"Simple script: {len(simple_script.instructions)} instructions")
    
    # Conditional script  
    conditional_script = MovementScript(name="conditional_transformation")
    conditional_script.add_flip(
        axis='horizontal',
        conditions=[(MovementCondition.HAS_SYMMETRY, 'horizontal')]
    )
    conditional_script.add_color_swap(
        color1=1, color2=2,
        conditions=[(MovementCondition.COLOR_COUNT, 2)]
    )
    print(f"Conditional script: {len(conditional_script.instructions)} instructions")
    
    # Complex composition
    complex_script = MovementScriptBuilder.create_complex_composition_script()
    print(f"Complex script: {len(complex_script.instructions)} instructions")
    
    # Test compilation
    test_grid = np.array([[1, 2], [2, 1]])
    print(f"\\n‚öôÔ∏è Compiling scripts for grid:\\n{test_grid}")
    
    scripts = {
        'Simple': simple_script,
        'Conditional': conditional_script,
        'Complex': complex_script
    }
    
    for script_name, script in scripts.items():
        try:
            expert_calls = compiler.compile_script(script, test_grid)
            print(f"{script_name}: {len(expert_calls)} expert calls generated")
            if expert_calls:
                print(f"  Experts: {[call.expert_name for call in expert_calls]}")
        except Exception as e:
            print(f"{script_name}: ‚ùå Compilation failed: {e}")
    
    print("\\n‚úÖ Movement language demonstrations completed!")

def demonstrate_enhanced_solvers():
    """Demonstrate enhanced solver capabilities"""
    print("\\nüß† ENHANCED SOLVER DEMONSTRATIONS")
    print("=" * 60)
    
    from enhanced_solvers_moe import (
        EnhancedColorPatternSolver, EnhancedShapeSymmetrySolver,
        EnhancedGeometricTransformSolver
    )
    
    solvers = {
        'Color Pattern': EnhancedColorPatternSolver(),
        'Shape Symmetry': EnhancedShapeSymmetrySolver(), 
        'Geometric': EnhancedGeometricTransformSolver()
    }
    
    test_grids = {
        'Color Pattern': np.array([[1, 2, 1], [2, 1, 2], [1, 2, 1]]),
        'Shape Symmetry': np.array([[1, 2, 1], [2, 3, 2], [1, 2, 1]]),
        'Geometric': np.array([[1, 2], [3, 4]])
    }
    
    for solver_name, solver in solvers.items():
        print(f"\\nüéØ {solver_name} Solver")
        print("-" * 40)
        
        test_grid = test_grids[solver_name]
        print(f"Input grid:\\n{test_grid}")
        
        try:
            # Analyze problem
            analysis = solver.analyze_problem(test_grid)
            print(f"Strategy: {analysis.get('strategy_name', 'Unknown')}")
            
            # Generate prediction
            start_time = time.time()
            output = solver.predict(test_grid)
            prediction_time = time.time() - start_time
            
            print(f"Output grid:\\n{output}")
            print(f"Prediction time: {prediction_time:.3f}s")
            
            # Show thinking flow
            thinking_flow = solver.get_thinking_flow()
            print(f"Confidence: {thinking_flow.get('confidence', 0):.3f}")
            print(f"Steps: {thinking_flow.get('steps', [])}")
            print(f"Movement sequence: {thinking_flow.get('movement_sequence', [])}")
            print(f"Expert usage: {thinking_flow.get('expert_usage', {})}")
            
            # Show performance summary
            summary = solver.get_performance_summary()
            print(f"Total executions: {summary.get('total_executions', 0)}")
            print(f"Success rate: {summary.get('success_rate', 0):.1%}")
            
        except Exception as e:
            print(f"‚ùå Solver failed: {e}")
    
    print("\\n‚úÖ Enhanced solver demonstrations completed!")

def run_comprehensive_problem_solving():
    """Run comprehensive problem solving demonstration"""
    print("\\nüéØ COMPREHENSIVE PROBLEM SOLVING")
    print("=" * 60)
    
    # Create enhanced system
    enhanced_system = create_enhanced_arc_system()
    problems = create_diverse_arc_problems()
    
    results_summary = []
    
    for i, problem in enumerate(problems, 1):
        print(f"\\n{'='*20} PROBLEM {i}: {problem['name']} {'='*20}")
        print(f"Description: {problem['description']}")
        print(f"Difficulty: {problem['difficulty']}")
        print(f"Expected experts: {problem['expected_experts']}")
        
        print(f"\\nInput Grid:\\n{problem['input']}")
        print(f"Expected Output:\\n{problem['expected_output']}")
        
        try:
            start_time = time.time()
            solution, results = enhanced_system.solve_with_enhanced_ensemble(
                problem['input'],
                problem['constraints']
            )
            solve_time = time.time() - start_time
            
            print(f"\\nSolution Grid:\\n{solution}")
            
            # Calculate accuracy
            accuracy = np.mean(solution == problem['expected_output'])
            print(f"\\nüìä RESULTS:")
            print(f"Accuracy: {accuracy:.1%}")
            print(f"Confidence: {results['confidence']:.3f}")
            print(f"Solve time: {solve_time:.2f}s")
            print(f"Iterations: {len(results['iteration_history'])}")
            
            # MoE Statistics
            moe_stats = results.get('moe_statistics', {})
            print(f"\\nüîß MoE Statistics:")
            print(f"Total movements: {moe_stats.get('total_movements_executed', 0)}")
            print(f"Unique experts used: {moe_stats.get('unique_experts_used', 0)}")
            print(f"Most used expert: {moe_stats.get('most_used_expert', 'None')}")
            
            # Expert usage breakdown
            expert_usage = moe_stats.get('expert_usage_counts', {})
            if expert_usage:
                print("Expert usage breakdown:")
                for expert, count in expert_usage.items():
                    print(f"  {expert}: {count}")
            
            # Enhanced metrics
            enhanced_metrics = results.get('enhanced_metrics', {})
            print(f"\\nüìà Enhanced Metrics:")
            print(f"Movement consensus rate: {enhanced_metrics.get('movement_consensus_rate', 0):.1%}")
            print(f"Expert diversity: {enhanced_metrics.get('expert_diversity_score', 0):.3f}")
            
            # Solver performance
            solver_history = results.get('solver_history', [])
            print(f"\\nüß† Solver Performance:")
            print(f"Active solvers: {set(solver_history)}")
            
            # Store results
            results_summary.append({
                'problem_name': problem['name'],
                'difficulty': problem['difficulty'],
                'accuracy': accuracy,
                'confidence': results['confidence'],
                'solve_time': solve_time,
                'iterations': len(results['iteration_history']),
                'experts_used': expert_usage,
                'movement_consensus_rate': enhanced_metrics.get('movement_consensus_rate', 0)
            })
            
            print("\\n‚úÖ Problem solved successfully!")
            
        except Exception as e:
            print(f"\\n‚ùå Problem solving failed: {e}")
            results_summary.append({
                'problem_name': problem['name'],
                'difficulty': problem['difficulty'],
                'accuracy': 0.0,
                'confidence': 0.0,
                'solve_time': 0.0,
                'iterations': 0,
                'experts_used': {},
                'movement_consensus_rate': 0.0
            })
    
    # Overall performance summary
    print("\\n" + "="*80)
    print("üìä OVERALL PERFORMANCE SUMMARY")
    print("="*80)
    
    if results_summary:
        avg_accuracy = np.mean([r['accuracy'] for r in results_summary])
        avg_confidence = np.mean([r['confidence'] for r in results_summary])
        avg_solve_time = np.mean([r['solve_time'] for r in results_summary])
        total_iterations = sum([r['iterations'] for r in results_summary])
        
        print(f"Average accuracy: {avg_accuracy:.1%}")
        print(f"Average confidence: {avg_confidence:.3f}")
        print(f"Average solve time: {avg_solve_time:.2f}s")
        print(f"Total iterations: {total_iterations}")
        
        # Expert usage summary
        all_expert_usage = defaultdict(int)
        for result in results_summary:
            for expert, count in result['experts_used'].items():
                all_expert_usage[expert] += count
        
        print(f"\\nüîß Overall Expert Usage:")
        for expert, total_count in sorted(all_expert_usage.items(), key=lambda x: x[1], reverse=True):
            print(f"  {expert}: {total_count} uses")
        
        # Performance by difficulty
        print(f"\\nüìà Performance by Difficulty:")
        for difficulty in ['Easy', 'Medium', 'Hard']:
            difficulty_results = [r for r in results_summary if r['difficulty'] == difficulty]
            if difficulty_results:
                avg_acc = np.mean([r['accuracy'] for r in difficulty_results])
                print(f"  {difficulty}: {avg_acc:.1%} accuracy")
    
    return results_summary

def create_comprehensive_visualization(results_summary: List[Dict]):
    """Create comprehensive visualization of results"""
    print("\\nüé® CREATING COMPREHENSIVE VISUALIZATIONS")
    print("=" * 60)
    
    if not results_summary:
        print("No results to visualize")
        return
    
    try:
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('Enhanced ARC MoE System Performance Analysis', fontsize=16, fontweight='bold')
        
        # Plot 1: Accuracy by Problem
        problem_names = [r['problem_name'] for r in results_summary]
        accuracies = [r['accuracy'] for r in results_summary]
        difficulties = [r['difficulty'] for r in results_summary]
        
        colors = {'Easy': 'green', 'Medium': 'orange', 'Hard': 'red'}
        bar_colors = [colors[d] for d in difficulties]
        
        ax1.bar(problem_names, accuracies, color=bar_colors, alpha=0.7)
        ax1.set_title('üéØ Accuracy by Problem')
        ax1.set_ylabel('Accuracy')
        ax1.set_ylim(0, 1.1)
        ax1.tick_params(axis='x', rotation=45)
        
        # Add difficulty legend
        for difficulty, color in colors.items():
            ax1.bar([], [], color=color, alpha=0.7, label=difficulty)
        ax1.legend()
        
        # Plot 2: Confidence vs Accuracy
        confidences = [r['confidence'] for r in results_summary]
        ax2.scatter(confidences, accuracies, c=bar_colors, alpha=0.7, s=100)
        ax2.set_title('üìä Confidence vs Accuracy')
        ax2.set_xlabel('Confidence')
        ax2.set_ylabel('Accuracy')
        ax2.plot([0, 1], [0, 1], 'k--', alpha=0.5, label='Perfect correlation')
        ax2.legend()
        
        # Plot 3: Solve Time by Problem
        solve_times = [r['solve_time'] for r in results_summary]
        ax3.bar(problem_names, solve_times, color='skyblue', alpha=0.7)
        ax3.set_title('‚è±Ô∏è Solve Time by Problem')
        ax3.set_ylabel('Time (seconds)')
        ax3.tick_params(axis='x', rotation=45)
        
        # Plot 4: Expert Usage Distribution
        all_expert_usage = defaultdict(int)
        for result in results_summary:
            for expert, count in result['experts_used'].items():
                all_expert_usage[expert] += count
        
        if all_expert_usage:
            experts = list(all_expert_usage.keys())
            usage_counts = list(all_expert_usage.values())
            
            ax4.pie(usage_counts, labels=experts, autopct='%1.1f%%', startangle=90)
            ax4.set_title('üîß Expert Usage Distribution')
        
        plt.tight_layout()
        plt.show()
        
        print("‚úÖ Visualizations created successfully!")
        
    except Exception as e:
        print(f"‚ùå Visualization failed: {e}")

def demonstrate_learning_evolution():
    """Demonstrate learning evolution over multiple problems"""
    print("\\nüìà LEARNING EVOLUTION DEMONSTRATION")
    print("=" * 60)
    
    enhanced_system = create_enhanced_arc_system()
    problems = create_diverse_arc_problems()
    
    learning_evolution = {
        'iterations': [],
        'accuracies': [],
        'confidences': [],
        'expert_diversity': [],
        'solver_preferences': []
    }
    
    print("Running problems sequentially to show learning evolution...")
    
    for i, problem in enumerate(problems[:3], 1):  # Use first 3 problems
        print(f"\\nüîÑ Problem {i}: {problem['name']}")
        
        try:
            solution, results = enhanced_system.solve_with_enhanced_ensemble(
                problem['input'],
                problem['constraints']
            )
            
            # Calculate accuracy
            accuracy = np.mean(solution == problem['expected_output'])
            
            # Store evolution data
            learning_evolution['iterations'].append(i)
            learning_evolution['accuracies'].append(accuracy)
            learning_evolution['confidences'].append(results['confidence'])
            
            # Expert diversity
            moe_stats = results.get('moe_statistics', {})
            expert_diversity = moe_stats.get('unique_experts_used', 0) / 4.0  # Normalize by max experts
            learning_evolution['expert_diversity'].append(expert_diversity)
            
            # Solver preferences
            final_prefs = results.get('final_preferences', {})
            learning_evolution['solver_preferences'].append(final_prefs.copy())
            
            print(f"  Accuracy: {accuracy:.1%}")
            print(f"  Confidence: {results['confidence']:.3f}")
            print(f"  Expert diversity: {expert_diversity:.3f}")
            
        except Exception as e:
            print(f"  ‚ùå Failed: {e}")
            continue
    
    # Visualize learning evolution
    if len(learning_evolution['iterations']) > 1:
        print("\\nüìä Learning Evolution Visualization")
        
        try:
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
            
            # Plot 1: Performance evolution
            ax1.plot(learning_evolution['iterations'], learning_evolution['accuracies'], 
                    'b-o', label='Accuracy', linewidth=2)
            ax1.plot(learning_evolution['iterations'], learning_evolution['confidences'], 
                    'r-s', label='Confidence', linewidth=2)
            ax1.plot(learning_evolution['iterations'], learning_evolution['expert_diversity'], 
                    'g-^', label='Expert Diversity', linewidth=2)
            
            ax1.set_title('üìà Learning Evolution Over Problems')
            ax1.set_xlabel('Problem Number')
            ax1.set_ylabel('Score')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            ax1.set_ylim(0, 1.1)
            
            # Plot 2: Solver preference evolution
            if learning_evolution['solver_preferences']:
                solver_names = list(learning_evolution['solver_preferences'][0].keys())
                colors = plt.cm.Set3(np.linspace(0, 1, len(solver_names)))
                
                for i, solver_name in enumerate(solver_names):
                    preferences = [prefs[solver_name] for prefs in learning_evolution['solver_preferences']]
                    ax2.plot(learning_evolution['iterations'], preferences, 
                            color=colors[i], marker='o', label=solver_name[:15], linewidth=2)
                
                ax2.set_title('üß† Solver Preference Evolution')
                ax2.set_xlabel('Problem Number')
                ax2.set_ylabel('Preference Weight')
                ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
                ax2.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.show()
            
            print("‚úÖ Learning evolution visualization completed!")
            
        except Exception as e:
            print(f"‚ùå Learning visualization failed: {e}")

def main():
    """Main demonstration function"""
    print("üöÄ ENHANCED ARC EFE MOE SYSTEM - COMPREHENSIVE DEMONSTRATION")
    print("=" * 80)
    print("Showcasing hierarchical MoE architecture with enhanced capabilities")
    print("=" * 80)
    
    # Run test suite first
    print("\\nüß™ Running comprehensive test suite first...")
    try:
        run_comprehensive_test_suite()
    except Exception as e:
        print(f"‚ùå Test suite failed: {e}")
        print("Continuing with demonstrations...")
    
    # Individual component demonstrations
    demonstrate_movement_experts()
    demonstrate_moe_router()
    demonstrate_movement_language()
    demonstrate_enhanced_solvers()
    
    # Comprehensive problem solving
    results_summary = run_comprehensive_problem_solving()
    
    # Create visualizations
    create_comprehensive_visualization(results_summary)
    
    # Learning evolution demonstration
    demonstrate_learning_evolution()
    
    # Final summary
    print("\\n" + "="*80)
    print("üéâ ENHANCED ARC EFE MOE SYSTEM DEMONSTRATION COMPLETE!")
    print("="*80)
    
    print("\\nüèóÔ∏è ARCHITECTURE DEMONSTRATED:")
    print("‚úÖ Level 1: Enhanced Solvers with strategic reasoning")
    print("‚úÖ Level 2: MoE Router with intelligent expert selection") 
    print("‚úÖ Level 3: Movement Experts with atomic transformations")
    
    print("\\nüéØ FEATURES SHOWCASED:")
    print("‚úÖ Declarative movement language and compilation")
    print("‚úÖ Multi-level consensus (solver + movement level)")
    print("‚úÖ Hierarchical EFE calculation with movement optimization")
    print("‚úÖ Enhanced RevThink verification with movement traces")
    print("‚úÖ Comprehensive learning and adaptation")
    print("‚úÖ Performance visualization and analysis")
    
    print("\\nüìä SYSTEM CAPABILITIES:")
    print("‚úÖ Modular and extensible architecture")
    print("‚úÖ Intelligent routing and expert selection")
    print("‚úÖ Multi-step reasoning with intermediate verification")
    print("‚úÖ Adaptive learning from experience")
    print("‚úÖ Robust error handling and fallback mechanisms")
    
    print("\\nüî¨ TECHNICAL ACHIEVEMENTS:")
    print("‚úÖ Successfully integrated MoE with existing ensemble system")
    print("‚úÖ Implemented hierarchical EFE optimization")
    print("‚úÖ Created declarative movement programming language")
    print("‚úÖ Demonstrated learning evolution and adaptation")
    print("‚úÖ Maintained backward compatibility with original system")
    
    print(f"\\nüéØ The enhanced ARC EFE system with MoE integration represents a")
    print(f"    significant advancement in modular AI architecture, combining")  
    print(f"    high-level strategic reasoning with low-level expert specialization")
    print(f"    while maintaining interpretability and adaptability.")

if __name__ == "__main__":
    main()